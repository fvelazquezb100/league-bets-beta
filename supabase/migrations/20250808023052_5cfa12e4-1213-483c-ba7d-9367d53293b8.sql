-- Betadona initial schema and RLS setup
-- Create leagues table
create table if not exists public.leagues (
  id bigint generated by default as identity primary key,
  name text not null,
  created_at timestamptz not null default now()
);

-- Create profiles table linked to auth.users and leagues
create table if not exists public.profiles (
  id uuid primary key default auth.uid(),
  username text not null,
  total_points numeric default 0,
  weekly_budget numeric default 1000,
  league_id bigint references public.leagues(id) on delete set null
);

-- Ensure a unique username (optional but recommended)
create unique index if not exists profiles_username_key on public.profiles (username);

-- Create bets table linked to profiles
create table if not exists public.bets (
  id bigserial primary key,
  user_id uuid not null references public.profiles(id) on delete cascade,
  stake numeric not null default 0,
  odds numeric not null default 1,
  payout numeric,
  match_description text,
  bet_selection text,
  status text default 'pending'
);

-- Create match_odds_cache table with a single-row pattern
create table if not exists public.match_odds_cache (
  id smallint primary key default 1,
  data jsonb not null default '{}'::jsonb,
  last_updated timestamp default now()
);

-- Enforce single-row invariant
create unique index if not exists match_odds_cache_single_row on public.match_odds_cache (id);

-- Enable RLS on all tables
alter table public.leagues enable row level security;
alter table public.profiles enable row level security;
alter table public.bets enable row level security;
alter table public.match_odds_cache enable row level security;

-- Drop pre-existing policies (idempotent)
drop policy if exists "Public can view leagues" on public.leagues;

drop policy if exists "Profiles are viewable by authenticated users" on public.profiles;
drop policy if exists "Users can insert their own profile" on public.profiles;
drop policy if exists "Users can update their own profile" on public.profiles;
drop policy if exists "Users can delete their own profile" on public.profiles;

drop policy if exists "Users can view their own bets" on public.bets;
drop policy if exists "Users can create their own bets" on public.bets;
drop policy if exists "Users can update their own bets" on public.bets;
drop policy if exists "Users can delete their own bets" on public.bets;

drop policy if exists "Public can read odds cache" on public.match_odds_cache;
drop policy if exists "Service role can manage odds cache" on public.match_odds_cache;

-- Leagues policies
create policy "Public can view leagues"
  on public.leagues
  for select
  to anon, authenticated
  using (true);

-- Profiles policies
create policy "Profiles are viewable by authenticated users"
  on public.profiles
  for select
  to authenticated
  using (true);

create policy "Users can insert their own profile"
  on public.profiles
  for insert
  to authenticated
  with check (id = auth.uid());

create policy "Users can update their own profile"
  on public.profiles
  for update
  to authenticated
  using (id = auth.uid())
  with check (id = auth.uid());

create policy "Users can delete their own profile"
  on public.profiles
  for delete
  to authenticated
  using (id = auth.uid());

-- Bets policies (owner-only access)
create policy "Users can view their own bets"
  on public.bets
  for select
  to authenticated
  using (user_id = auth.uid());

create policy "Users can create their own bets"
  on public.bets
  for insert
  to authenticated
  with check (user_id = auth.uid());

create policy "Users can update their own bets"
  on public.bets
  for update
  to authenticated
  using (user_id = auth.uid())
  with check (user_id = auth.uid());

create policy "Users can delete their own bets"
  on public.bets
  for delete
  to authenticated
  using (user_id = auth.uid());

-- Odds cache policies
create policy "Public can read odds cache"
  on public.match_odds_cache
  for select
  to anon, authenticated
  using (true);

-- Allow only service role to modify cache (via Edge Functions / server)
create policy "Service role can manage odds cache"
  on public.match_odds_cache
  for all
  to service_role
  using (true)
  with check (true);
