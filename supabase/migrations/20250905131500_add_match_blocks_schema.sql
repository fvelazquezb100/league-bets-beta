-- Ensure match_result is only auto-filled when not provided explicitly
CREATE OR REPLACE FUNCTION public.update_result_text()
RETURNS trigger AS $$
BEGIN
    IF NEW.match_result IS NULL OR NEW.match_result = '' THEN
        NEW.match_result := NEW.home_goals || ' - ' || NEW.away_goals;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add blocking counters to profiles so each user tracks remaining blocks (per week) and received blocks
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS blocks_available integer NOT NULL DEFAULT 0;

ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS blocks_received integer NOT NULL DEFAULT 0;

COMMENT ON COLUMN public.profiles.blocks_available IS 'Number of match blocks the user can still assign to other league members.';
COMMENT ON COLUMN public.profiles.blocks_received IS 'Number of times other league members have blocked this user''s matches.';

-- Table to register when a user blocks another user''s ability to bet on a specific fixture
CREATE TABLE IF NOT EXISTS public.match_blocks (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    blocker_user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    blocked_user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    league_id bigint NOT NULL REFERENCES public.leagues(id) ON DELETE CASCADE,
    fixture_id bigint NOT NULL REFERENCES public.match_results(fixture_id) ON DELETE CASCADE,
    week integer NOT NULL,
    status text NOT NULL DEFAULT 'active',
    created_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
    updated_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
    CHECK (blocker_user_id <> blocked_user_id)
);

COMMENT ON TABLE public.match_blocks IS 'Logs match blocking actions so admins can audit who blocked whom and when.';
COMMENT ON COLUMN public.match_blocks.blocker_user_id IS 'User who initiates the block.';
COMMENT ON COLUMN public.match_blocks.blocked_user_id IS 'User who is prevented from betting on the fixture.';
COMMENT ON COLUMN public.match_blocks.league_id IS 'League where the block applies (users only share one league).';
COMMENT ON COLUMN public.match_blocks.fixture_id IS 'Fixture identifier that becomes unavailable to the blocked user.';
COMMENT ON COLUMN public.match_blocks.week IS 'League week in which the block was applied.';
COMMENT ON COLUMN public.match_blocks.status IS 'State of the block (active, revoked, etc.).';
COMMENT ON COLUMN public.match_blocks.created_at IS 'Timestamp when the block was created.';
COMMENT ON COLUMN public.match_blocks.updated_at IS 'Timestamp when the block was last updated.';

-- Prevent duplicate blocks for the same user/fixture/week within the same league
CREATE UNIQUE INDEX IF NOT EXISTS match_blocks_unique_target ON public.match_blocks (blocked_user_id, fixture_id, league_id, week);

-- Helpful index to query by blocker user when reviewing their spending of block resources
CREATE INDEX IF NOT EXISTS match_blocks_blocker_idx ON public.match_blocks (blocker_user_id, league_id, week);

-- Enable RLS and add policies for secure access control
ALTER TABLE public.match_blocks ENABLE ROW LEVEL SECURITY;

-- Allow league members to view blocks within their own league
DROP POLICY IF EXISTS "League members can view match blocks" ON public.match_blocks;
CREATE POLICY "League members can view match blocks" 
ON public.match_blocks
FOR SELECT
TO authenticated
USING (league_id = get_current_user_league_id());

-- Allow users to insert blocks they initiate within their league
DROP POLICY IF EXISTS "Users can create match blocks in their league" ON public.match_blocks;
CREATE POLICY "Users can create match blocks in their league"
ON public.match_blocks
FOR INSERT
TO authenticated
WITH CHECK (
    blocker_user_id = auth.uid()
    AND league_id = get_current_user_league_id()
    AND blocked_user_id IN (
        SELECT p.id FROM public.profiles p WHERE p.league_id = get_current_user_league_id()
    )
    AND fixture_id IN (
        SELECT mr.fixture_id FROM public.match_results mr WHERE mr.league_id = get_current_user_league_id()
    )
);

-- Allow blockers to update or delete their own blocks
DROP POLICY IF EXISTS "Users can manage their own match blocks" ON public.match_blocks;
CREATE POLICY "Users can manage their own match blocks"
ON public.match_blocks
FOR UPDATE
TO authenticated
USING (blocker_user_id = auth.uid())
WITH CHECK (blocker_user_id = auth.uid());

DROP POLICY IF EXISTS "Users can delete their own match blocks" ON public.match_blocks;
CREATE POLICY "Users can delete their own match blocks"
ON public.match_blocks
FOR DELETE
TO authenticated
USING (blocker_user_id = auth.uid());

-- Service role retains full access for backend processes
DROP POLICY IF EXISTS "Service role can manage all match blocks" ON public.match_blocks;
CREATE POLICY "Service role can manage all match blocks"
ON public.match_blocks
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);

-- Grant permissions (RLS still governs row-level access)
GRANT SELECT, INSERT, UPDATE, DELETE ON public.match_blocks TO authenticated;
GRANT ALL ON public.match_blocks TO service_role;

