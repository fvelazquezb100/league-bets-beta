-- Create weekly_performance table
CREATE TABLE public.weekly_performance (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  start_date TIMESTAMP WITH TIME ZONE NOT NULL,
  end_date TIMESTAMP WITH TIME ZONE NOT NULL,
  net_profit NUMERIC NOT NULL DEFAULT 0,
  league_id BIGINT REFERENCES public.leagues(id),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Enable RLS on weekly_performance table
ALTER TABLE public.weekly_performance ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for weekly_performance
CREATE POLICY "Users can view their own performance or league members" 
ON public.weekly_performance 
FOR SELECT 
USING (
  user_id = auth.uid() 
  OR (league_id IS NOT NULL AND league_id = get_current_user_league_id())
);

CREATE POLICY "Service role can manage all performance records" 
ON public.weekly_performance 
FOR ALL 
USING (true) 
WITH CHECK (true);

-- Create index for better performance
CREATE INDEX idx_weekly_performance_user_id ON public.weekly_performance(user_id);
CREATE INDEX idx_weekly_performance_dates ON public.weekly_performance(start_date, end_date);

-- Create function to calculate and store weekly performance
CREATE OR REPLACE FUNCTION public.calculate_and_store_weekly_performance()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
DECLARE
  v_start_date TIMESTAMP WITH TIME ZONE;
  v_end_date TIMESTAMP WITH TIME ZONE;
  v_user RECORD;
  v_net_profit NUMERIC;
BEGIN
  -- Calculate the date range for the past 7 days
  v_end_date := date_trunc('day', now());
  v_start_date := v_end_date - INTERVAL '7 days';
  
  -- Loop through each user and calculate their performance
  FOR v_user IN 
    SELECT p.id, p.league_id 
    FROM public.profiles p
  LOOP
    -- Calculate net profit for this user over the period
    SELECT 
      COALESCE(SUM(COALESCE(b.payout, 0) - COALESCE(b.stake, 0)), 0)
    INTO v_net_profit
    FROM public.bets b
    WHERE b.user_id = v_user.id
      AND b.status IN ('won', 'lost') -- Only settled bets
      AND b.created_at >= v_start_date
      AND b.created_at < v_end_date;
    
    -- Insert the performance record
    INSERT INTO public.weekly_performance (
      user_id, 
      start_date, 
      end_date, 
      net_profit, 
      league_id
    ) VALUES (
      v_user.id,
      v_start_date,
      v_end_date,
      v_net_profit,
      v_user.league_id
    );
  END LOOP;
END;
$$;

-- Create function to reset all weekly budgets
CREATE OR REPLACE FUNCTION public.reset_all_weekly_budgets()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
  -- Reset weekly budgets for all users to 1000
  UPDATE public.profiles
  SET weekly_budget = 1000;
END;
$$;